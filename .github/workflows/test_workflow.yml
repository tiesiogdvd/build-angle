name: build-angle
on:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - main
jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      ANGLE_COMMIT: ${{ steps.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
    steps:
      - name: Get Latest Commit Id
        id: info
        run: |
          echo ANGLE_COMMIT=`git ls-remote https://chromium.googlesource.com/angle/angle HEAD | awk '{ print $1 }'` >> ${GITHUB_OUTPUT}
          echo BUILD_DATE=`date +'%Y-%m-%d'` >> ${GITHUB_OUTPUT}

  extract-from-chromium:
    runs-on: ubuntu-24.04
    needs: info
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            arch: x64
            chromium_platform: Win_x64
          - platform: windows
            arch: arm64
            chromium_platform: Win_Arm64
          - platform: linux
            arch: x64
            chromium_platform: Linux_x64
          - platform: mac
            arch: x64
            chromium_platform: Mac
          - platform: mac
            arch: arm64
            chromium_platform: Mac_Arm
    env:
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Get latest Chromium build
        id: chromium
        run: |
          LAST_CHANGE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots/${{ matrix.chromium_platform }}/LAST_CHANGE"
          POSITION=$(curl -s "$LAST_CHANGE_URL")
          echo "POSITION=$POSITION" >> $GITHUB_OUTPUT
          echo "Found Chromium build: $POSITION"
          
      - name: Download and Extract
        run: |
          BASE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots"
          POSITION="${{ steps.chromium.outputs.POSITION }}"
          
          # Download
          if [ "${{ matrix.platform }}" = "windows" ]; then
            URL="${BASE_URL}/${{ matrix.chromium_platform }}/${POSITION}/chrome-win.zip"
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            URL="${BASE_URL}/Linux_x64/${POSITION}/chrome-linux.zip"
          else
            URL="${BASE_URL}/${{ matrix.chromium_platform }}/${POSITION}/chrome-mac.zip"
          fi
          
          echo "Downloading: $URL"
          curl -L -o chromium.zip "$URL"
          unzip -q chromium.zip
          
          # Extract libraries
          mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp chrome-win/libEGL.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
            cp chrome-win/libGLESv2.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
            cp chrome-win/d3dcompiler_47.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
            if [ -d chrome-win/swiftshader ]; then
              mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader
              cp chrome-win/swiftshader/*.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader/ || true
            fi
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            cp chrome-linux/libEGL.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
            cp chrome-linux/libGLESv2.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
            if [ -d chrome-linux/swiftshader ]; then
              mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader
              cp chrome-linux/swiftshader/*.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader/ || true
            fi
          else
            # macOS - find libraries in app bundle
            APP_PATH="chrome-mac/Chromium.app"
            if [ -d "$APP_PATH/Contents/Frameworks/Chromium Framework.framework/Libraries" ]; then
              cp "$APP_PATH/Contents/Frameworks/Chromium Framework.framework/Libraries/libEGL.dylib" angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || \
              find "$APP_PATH" -name "libEGL.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \;
              
              cp "$APP_PATH/Contents/Frameworks/Chromium Framework.framework/Libraries/libGLESv2.dylib" angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || \
              find "$APP_PATH" -name "libGLESv2.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \;
            fi
            
            # Check for swiftshader
            if [ -d "$APP_PATH/Contents/Frameworks/Chromium Framework.framework/Libraries/vk_swiftshader.dylib" ]; then
              mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader
              cp "$APP_PATH/Contents/Frameworks/Chromium Framework.framework/Libraries/vk_swiftshader*.dylib" angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader/ || true
            fi
          fi
          
          # Get headers
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git angle-headers
          cp -r angle-headers/include angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          # List contents
          echo "Package contents:"
          ls -la angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          # Package
          zip -r angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  extract-linux-arm64:
    runs-on: ubuntu-24.04
    needs: info
    env:
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Get latest Electron release
        id: electron
        run: |
          # Get the latest stable Electron version
          ELECTRON_VERSION=$(curl -s https://api.github.com/repos/electron/electron/releases/latest | grep '"tag_name"' | cut -d'"' -f4 | sed 's/v//')
          echo "ELECTRON_VERSION=$ELECTRON_VERSION" >> $GITHUB_OUTPUT
          echo "Found Electron version: $ELECTRON_VERSION"
          
      - name: Download and extract Electron ARM64
        run: |
          VERSION="${{ steps.electron.outputs.ELECTRON_VERSION }}"
          echo "Downloading Electron v$VERSION for Linux ARM64"
          
          # Download Electron ARM64 binary
          URL="https://github.com/electron/electron/releases/download/v${VERSION}/electron-v${VERSION}-linux-arm64.zip"
          echo "Downloading: $URL"
          
          # Check if it exists first
          if curl --head --fail "$URL" 2>/dev/null; then
            curl -L -o electron-arm64.zip "$URL"
          else
            echo "Electron ARM64 not found for version $VERSION, trying previous version"
            # Try to get a slightly older version that has ARM64
            VERSION="32.0.1"  # Known good version with ARM64
            URL="https://github.com/electron/electron/releases/download/v${VERSION}/electron-v${VERSION}-linux-arm64.zip"
            curl -L -o electron-arm64.zip "$URL"
          fi
          
          # Extract
          unzip -q electron-arm64.zip -d electron-arm64
          
          # Create package directory
          mkdir -p angle-linux-arm64-${{ env.BUILD_DATE }}
          
          # Copy ANGLE libraries
          if [ -f "electron-arm64/libEGL.so" ]; then
            cp electron-arm64/libEGL.so angle-linux-arm64-${{ env.BUILD_DATE }}/
            echo "Found libEGL.so"
          else
            echo "WARNING: libEGL.so not found"
          fi
          
          if [ -f "electron-arm64/libGLESv2.so" ]; then
            cp electron-arm64/libGLESv2.so angle-linux-arm64-${{ env.BUILD_DATE }}/
            echo "Found libGLESv2.so"
          else
            echo "WARNING: libGLESv2.so not found"
          fi
          
          # Check for swiftshader
          if [ -d "electron-arm64/swiftshader" ]; then
            echo "Found swiftshader directory"
            mkdir -p angle-linux-arm64-${{ env.BUILD_DATE }}/swiftshader
            cp electron-arm64/swiftshader/libEGL.so angle-linux-arm64-${{ env.BUILD_DATE }}/swiftshader/ || true
            cp electron-arm64/swiftshader/libGLESv2.so angle-linux-arm64-${{ env.BUILD_DATE }}/swiftshader/ || true
          fi
          
          # Get ANGLE headers
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git angle-headers
          cp -r angle-headers/include angle-linux-arm64-${{ env.BUILD_DATE }}/
          
          # List what we got
          echo "Package contents:"
          ls -la angle-linux-arm64-${{ env.BUILD_DATE }}/
          
          # Create zip
          zip -r angle-linux-arm64-${{ env.BUILD_DATE }}.zip angle-linux-arm64-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-linux-arm64-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-linux-arm64-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  release:
    runs-on: ubuntu-24.04
    needs: [info, extract-from-chromium, extract-linux-arm64]
    if: always() && needs.info.result == 'success'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Create GitHub Release
        run: |
          cat > notes.txt << EOF
          [ANGLE Commit](https://github.com/google/angle/commit/${{ needs.info.outputs.ANGLE_COMMIT }})
          
          ## Build Sources
          
          ### Extracted from Chromium snapshots:
          - Windows x64, arm64
          - Linux x64
          - macOS x64, arm64
          
          ### Extracted from Electron releases:
          - Linux arm64
          
          ## Included Backends
          
          ### Windows
          - Direct3D 9/11 (via d3dcompiler_47.dll)
          - OpenGL
          - Vulkan
          - SwiftShader (software renderer)
          
          ### Linux
          - OpenGL ES
          - Vulkan  
          - SwiftShader (software renderer)
          
          ### macOS
          - Metal
          - OpenGL
          - SwiftShader (software renderer)
          
          ## Notes
          - All libraries are extracted from official Google builds
          - Headers are from the ANGLE repository at the commit specified above
          - SwiftShader provides software rendering fallback when hardware acceleration is unavailable
          EOF
          
          gh release create ${{ needs.info.outputs.BUILD_DATE }} -R "${GITHUB_REPOSITORY}" -t '${{ needs.info.outputs.BUILD_DATE }}' -F notes.txt
      
      - name: Get Artifacts From Build Steps
        uses: actions/download-artifact@v4
        with:
          pattern: angle-*-${{ needs.info.outputs.BUILD_DATE }}
          merge-multiple: true
      
      - name: List artifacts to upload
        run: |
          echo "Artifacts to upload:"
          ls -la angle-*.zip
      
      - name: Upload Artifacts to GitHub Release
        run: |
          for file in angle-*-${{ needs.info.outputs.BUILD_DATE }}.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload '${{ needs.info.outputs.BUILD_DATE }}' "$file" -R "${GITHUB_REPOSITORY}"
            fi
          done
