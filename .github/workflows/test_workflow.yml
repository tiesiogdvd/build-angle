name: build-angle
on:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - main
jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      ANGLE_COMMIT: ${{ steps.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
    steps:
      - name: Get Latest Commit Id
        id: info
        run: |
          echo ANGLE_COMMIT=`git ls-remote https://chromium.googlesource.com/angle/angle HEAD | awk '{ print $1 }'` >> ${GITHUB_OUTPUT}
          echo BUILD_DATE=`date +'%Y-%m-%d'` >> ${GITHUB_OUTPUT}

  extract-from-chromium:
    runs-on: ubuntu-24.04
    needs: info
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            arch: x64
            chromium_platform: Win_x64
          - platform: windows
            arch: arm64
            chromium_platform: Win_Arm64
          - platform: linux
            arch: x64
            chromium_platform: Linux_x64
          - platform: mac
            arch: x64
            chromium_platform: Mac
          - platform: mac
            arch: arm64
            chromium_platform: Mac_Arm
    env:
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Get latest Chromium build
        id: chromium
        run: |
          LAST_CHANGE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots/${{ matrix.chromium_platform }}/LAST_CHANGE"
          
          if curl -s --head "$LAST_CHANGE_URL" | head -n 1 | grep "200\|301\|302" > /dev/null; then
            POSITION=$(curl -s "$LAST_CHANGE_URL")
            echo "POSITION=$POSITION" >> $GITHUB_OUTPUT
            echo "Found Chromium build: $POSITION for ${{ matrix.chromium_platform }}"
          else
            echo "Platform ${{ matrix.chromium_platform }} not available"
            echo "POSITION=skip" >> $GITHUB_OUTPUT
          fi
          
      - name: Download Chromium
        if: steps.chromium.outputs.POSITION != 'skip'
        run: |
          BASE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots"
          POSITION="${{ steps.chromium.outputs.POSITION }}"
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            URL="${BASE_URL}/${{ matrix.chromium_platform }}/${POSITION}/chrome-win.zip"
            echo "Downloading from: $URL"
            curl -L -o chromium.zip "$URL"
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            URL="${BASE_URL}/Linux_x64/${POSITION}/chrome-linux.zip"
            echo "Downloading from: $URL"
            curl -L -o chromium.zip "$URL"
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            URL="${BASE_URL}/${{ matrix.chromium_platform }}/${POSITION}/chrome-mac.zip"
            echo "Downloading from: $URL"
            curl -L -o chromium.zip "$URL"
          fi
          
      - name: Extract ANGLE libraries
        if: steps.chromium.outputs.POSITION != 'skip'
        run: |
          unzip -q chromium.zip
          
          mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            if [ -d "chrome-win" ]; then
              CHROME_DIR="chrome-win"
            else
              echo "Chrome directory not found"
              ls -la
              exit 1
            fi
            
            cp $CHROME_DIR/libEGL.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libEGL.dll not found"
            cp $CHROME_DIR/libGLESv2.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libGLESv2.dll not found"
            cp $CHROME_DIR/d3dcompiler_*.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
            
            if [ -d "$CHROME_DIR/swiftshader" ]; then
              cp $CHROME_DIR/swiftshader/libEGL.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libEGL.dll || true
              cp $CHROME_DIR/swiftshader/libGLESv2.dll angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libGLESv2.dll || true
            fi
            
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            if [ -d "chrome-linux" ]; then
              cp chrome-linux/libEGL.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libEGL.so not found"
              cp chrome-linux/libGLESv2.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libGLESv2.so not found"
              
              if [ -d "chrome-linux/swiftshader" ]; then
                cp chrome-linux/swiftshader/libEGL.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libEGL.so || true
                cp chrome-linux/swiftshader/libGLESv2.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libGLESv2.so || true
              fi
            fi
            
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            APP_PATH="chrome-mac/Chromium.app"
            if [ -d "$APP_PATH/Contents/Frameworks" ]; then
              find "$APP_PATH/Contents/Frameworks" -name "libEGL.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \;
              find "$APP_PATH/Contents/Frameworks" -name "libGLESv2.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \;
            fi
          fi
          
          # Get ANGLE headers
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git angle-headers
          cp -r angle-headers/include angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          # Create zip
          zip -r angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  build-linux-arm64:
    runs-on: ubuntu-24.04
    needs: info
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            python3 \
            ninja-build \
            pkg-config \
            libglib2.0-dev \
            libx11-dev \
            libxext-dev \
            libgl-dev \
            libgles-dev \
            libegl-dev \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu
          
      - name: Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH
          
      - name: Fetch ANGLE (minimal)
        run: |
          cat > .gclient << 'EOF'
          solutions = [
            {
              "name": "angle",
              "url": "https://chromium.googlesource.com/angle/angle.git",
              "managed": False,
              "custom_deps": {
                "third_party/VK-GL-CTS/src": None,
                "third_party/llvm/src": None,
              },
            },
          ]
          EOF
          
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git
          cd angle
          git fetch --depth 1 origin ${{ env.ANGLE_COMMIT }}
          git checkout ${{ env.ANGLE_COMMIT }}
          
          python scripts/bootstrap.py
          gclient sync --no-history -D
          
      - name: Configure build for ARM64
        run: |
          cd angle
          
          ARGS="is_debug=false is_component_build=false"
          ARGS="$ARGS angle_enable_gl=true"
          ARGS="$ARGS angle_enable_vulkan=true"
          ARGS="$ARGS angle_enable_null=true"
          ARGS="$ARGS angle_build_tests=false"
          ARGS="$ARGS target_cpu=\"arm64\""
          ARGS="$ARGS use_sysroot=false"
          
          gn gen out/Release --args="$ARGS"
          
      - name: Build
        run: |
          cd angle
          ninja -C out/Release libEGL libGLESv2
          
      - name: Package
        run: |
          cd angle
          mkdir -p ../angle-linux-arm64-${{ env.BUILD_DATE }}
          
          cp -v out/Release/libEGL.so* ../angle-linux-arm64-${{ env.BUILD_DATE }}/ || true
          cp -v out/Release/libGLESv2.so* ../angle-linux-arm64-${{ env.BUILD_DATE }}/ || true
          cp -r include ../angle-linux-arm64-${{ env.BUILD_DATE }}/
          
          cd ..
          zip -r angle-linux-arm64-${{ env.BUILD_DATE }}.zip angle-linux-arm64-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-linux-arm64-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-linux-arm64-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  release:
    runs-on: ubuntu-24.04
    needs: [info, extract-from-chromium, build-linux-arm64]
    if: always() && needs.info.result == 'success'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Create GitHub Release
        run: |
          cat > notes.txt << EOF
          [ANGLE Commit](https://github.com/google/angle/commit/${{ needs.info.outputs.ANGLE_COMMIT }})
          
          ## Build Sources
          - Windows (x64, arm64): Extracted from Chromium
          - Linux x64: Extracted from Chromium
          - Linux arm64: Built from source
          - macOS (x64, arm64): Extracted from Chromium
          EOF
          
          gh release create ${{ needs.info.outputs.BUILD_DATE }} -R "${GITHUB_REPOSITORY}" -t '${{ needs.info.outputs.BUILD_DATE }}' -F notes.txt
      
      - name: Get Artifacts From Build Steps
        uses: actions/download-artifact@v4
        with:
          pattern: angle-*-${{ needs.info.outputs.BUILD_DATE }}
          merge-multiple: true
      
      - name: Upload Artifacts to GitHub Release
        run: |
          for file in angle-*-${{ needs.info.outputs.BUILD_DATE }}.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload '${{ needs.info.outputs.BUILD_DATE }}' "$file" -R "${GITHUB_REPOSITORY}"
            fi
          done
