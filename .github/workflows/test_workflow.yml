name: build-angle
on:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - main
jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      ANGLE_COMMIT: ${{ steps.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
    steps:
      - name: Get Latest Commit Id
        id: info
        run: |
          echo ANGLE_COMMIT=`git ls-remote https://chromium.googlesource.com/angle/angle HEAD | awk '{ print $1 }'` >> ${GITHUB_OUTPUT}
          echo BUILD_DATE=`date +'%Y-%m-%d'` >> ${GITHUB_OUTPUT}

  build-windows:
    runs-on: windows-2022
    needs: info
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Build Script
        shell: cmd
        run: call build.cmd ${{ matrix.arch }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-windows-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  extract-from-chromium:
    runs-on: ubuntu-24.04
    needs: info
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            arch: x64
            chromium_platform: Linux_x64
          - platform: mac
            arch: x64
            chromium_platform: Mac
          - platform: mac
            arch: arm64
            chromium_platform: Mac_Arm
    env:
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Get latest Chromium build
        id: chromium
        run: |
          # Get the LAST_CHANGE file which contains the latest build number
          if [ "${{ matrix.chromium_platform }}" = "Linux_x64" ]; then
            LAST_CHANGE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots/Linux_x64/LAST_CHANGE"
          elif [ "${{ matrix.chromium_platform }}" = "Mac" ]; then
            LAST_CHANGE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots/Mac/LAST_CHANGE"
          elif [ "${{ matrix.chromium_platform }}" = "Mac_Arm" ]; then
            LAST_CHANGE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots/Mac_Arm/LAST_CHANGE"
          fi
          
          POSITION=$(curl -s "$LAST_CHANGE_URL")
          echo "POSITION=$POSITION" >> $GITHUB_OUTPUT
          echo "Found Chromium build: $POSITION"
          
      - name: Download Chromium
        run: |
          BASE_URL="https://commondatastorage.googleapis.com/chromium-browser-snapshots"
          POSITION="${{ steps.chromium.outputs.POSITION }}"
          
          if [ "${{ matrix.platform }}" = "linux" ]; then
            URL="${BASE_URL}/Linux_x64/${POSITION}/chrome-linux.zip"
            echo "Downloading from: $URL"
            curl -L -o chromium.zip "$URL"
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              URL="${BASE_URL}/Mac_Arm/${POSITION}/chrome-mac.zip"
            else
              URL="${BASE_URL}/Mac/${POSITION}/chrome-mac.zip"
            fi
            echo "Downloading from: $URL"
            curl -L -o chromium.zip "$URL"
          fi
          
      - name: Extract ANGLE libraries
        run: |
          unzip -q chromium.zip || (echo "Failed to unzip, checking contents:" && unzip -l chromium.zip | head -20)
          
          mkdir -p angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
          if [ "${{ matrix.platform }}" = "linux" ]; then
            # Linux: Libraries are in the chrome-linux directory
            if [ -d "chrome-linux" ]; then
              cp chrome-linux/libEGL.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libEGL.so not found"
              cp chrome-linux/libGLESv2.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || echo "libGLESv2.so not found"
              
              # Also check for swiftshader versions
              if [ -d "chrome-linux/swiftshader" ]; then
                cp chrome-linux/swiftshader/libEGL.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libEGL.so || true
                cp chrome-linux/swiftshader/libGLESv2.so angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/swiftshader_libGLESv2.so || true
              fi
            else
              echo "chrome-linux directory not found, listing contents:"
              ls -la
            fi
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            # Mac: Libraries are inside the .app bundle
            if [ -d "chrome-mac" ]; then
              # Find the Chromium.app
              APP_PATH="chrome-mac/Chromium.app"
              if [ -d "$APP_PATH" ]; then
                # Libraries are typically in Contents/Frameworks
                FRAMEWORK_PATH="$APP_PATH/Contents/Frameworks"
                if [ -d "$FRAMEWORK_PATH" ]; then
                  find "$FRAMEWORK_PATH" -name "libEGL.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \; || echo "libEGL.dylib not found"
                  find "$FRAMEWORK_PATH" -name "libGLESv2.dylib" -exec cp {} angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ \; || echo "libGLESv2.dylib not found"
                  
                  # List what we found
                  echo "Found libraries:"
                  ls -la angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
                else
                  echo "Frameworks directory not found, searching entire app:"
                  find "$APP_PATH" -name "*.dylib" | head -20
                fi
              else
                echo "Chromium.app not found, listing chrome-mac contents:"
                ls -la chrome-mac/
              fi
            else
              echo "chrome-mac directory not found, listing contents:"
              ls -la
            fi
          fi
          
          # Get ANGLE headers from the repository
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git angle-headers
          cp -r angle-headers/include angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          # Check what we have
          echo "Final package contents:"
          ls -la angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          # Create zip only if we have the libraries
          if [ -f "angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/libEGL.so" ] || \
             [ -f "angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/libEGL.dylib" ] || \
             [ -f "angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/libGLESv2.so" ] || \
             [ -f "angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}/libGLESv2.dylib" ]; then
            zip -r angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          else
            echo "ERROR: No ANGLE libraries found!"
            # Create a zip with just headers as fallback
            zip -r angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          fi
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  release:
    runs-on: ubuntu-24.04
    needs: [info, build-windows, extract-from-chromium]
    if: always() && needs.info.result == 'success'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Create GitHub Release
        run: |
          cat > notes.txt << EOF
          [ANGLE Commit](https://github.com/google/angle/commit/${{ needs.info.outputs.ANGLE_COMMIT }})
          
          ## Build Sources
          - Windows: Built from source
          - Linux/macOS: Extracted from Chromium stable builds
          EOF
          
          gh release create ${{ needs.info.outputs.BUILD_DATE }} -R "${GITHUB_REPOSITORY}" -t '${{ needs.info.outputs.BUILD_DATE }}' -F notes.txt
      
      - name: Get Artifacts From Build Steps
        uses: actions/download-artifact@v4
        with:
          pattern: angle-*-${{ needs.info.outputs.BUILD_DATE }}
          merge-multiple: true
      
      - name: Upload Artifacts to GitHub Release
        run: |
          for file in angle-*.zip; do
            [ -f "$file" ] && gh release upload '${{ needs.info.outputs.BUILD_DATE }}' "$file" -R "${GITHUB_REPOSITORY}"
          done
