name: build-angle
on:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - main
jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      ANGLE_COMMIT: ${{ steps.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
    steps:
      - name: Get Latest Commit Id
        id: info
        run: |
          echo ANGLE_COMMIT=`git ls-remote https://chromium.googlesource.com/angle/angle HEAD | awk '{ print $1 }'` >> ${GITHUB_OUTPUT}
          echo BUILD_DATE=`date +'%Y-%m-%d'` >> ${GITHUB_OUTPUT}

  build-windows:
    runs-on: windows-2022
    needs: info
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Build Script
        shell: cmd
        run: call build.cmd ${{ matrix.arch }}
      # FIX: Rename the output from build.cmd to match expected naming
      - name: Rename artifact
        shell: cmd
        run: |
          if exist angle-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip (
            move angle-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip angle-windows-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          )
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-windows-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-windows-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  build-linux:
    runs-on: ubuntu-24.04
    needs: info
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install initial dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential python3 python3-pip ninja-build
          
      - name: Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH
          
      # FIX: Use a minimal .gclient to avoid downloading test dependencies
      - name: Fetch ANGLE (minimal)
        run: |
          # Create a minimal .gclient that skips test dependencies
          cat > .gclient << 'EOF'
          solutions = [
            {
              "name": "angle",
              "url": "https://chromium.googlesource.com/angle/angle.git",
              "managed": False,
              "custom_deps": {
                # Skip heavy test dependencies
                "third_party/VK-GL-CTS/src": None,
                "third_party/llvm/src": None,
              },
              "custom_vars": {
                "angle_skip_tests": True,
              },
            },
          ]
          EOF
          
          # Clone ANGLE with minimal history
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git
          cd angle
          git fetch --depth 1 origin ${{ env.ANGLE_COMMIT }}
          git checkout ${{ env.ANGLE_COMMIT }}
          
          # Bootstrap and sync with minimal dependencies
          python scripts/bootstrap.py
          gclient sync --no-history -D
          
      - name: Install build dependencies
        run: |
          cd angle
          if [ -f "build/install-build-deps.sh" ]; then
            ./build/install-build-deps.sh
          fi
          # Install cross-compilation tools for ARM64 if needed
          if [ "${{ matrix.arch }}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi
          
      - name: Configure build
        run: |
          cd angle
          
          # Build with all Linux-supported backends
          ARGS="is_debug=false is_component_build=false"
          ARGS="$ARGS angle_enable_gl=true"
          ARGS="$ARGS angle_enable_vulkan=true"
          ARGS="$ARGS angle_enable_null=true"
          ARGS="$ARGS angle_build_tests=false"  # Skip test builds
          
          # Set architecture
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ARGS="$ARGS target_cpu=\"arm64\""
            if [ "$(uname -m)" = "x86_64" ]; then
              ARGS="$ARGS use_sysroot=false"
            fi
          else
            ARGS="$ARGS target_cpu=\"x64\""
          fi
          
          gn gen out/Release --args="$ARGS"
          
      - name: Build
        run: |
          cd angle
          ninja -C out/Release libEGL libGLESv2
          
      - name: Package
        run: |
          cd angle
          mkdir -p ../angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
          # Copy libraries
          cp -v out/Release/libEGL.so* ../angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
          cp -v out/Release/libGLESv2.so* ../angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
          
          # Copy headers
          cp -r include ../angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          cd ..
          zip -r angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-linux-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-linux-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-linux-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  build-macos:
    needs: info
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            arch: x64
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH
          
      # FIX: Use minimal fetch for macOS too
      - name: Fetch ANGLE (minimal)
        run: |
          # Create a minimal .gclient
          cat > .gclient << 'EOF'
          solutions = [
            {
              "name": "angle",
              "url": "https://chromium.googlesource.com/angle/angle.git",
              "managed": False,
              "custom_deps": {
                "third_party/VK-GL-CTS/src": None,
                "third_party/llvm/src": None,
              },
              "custom_vars": {
                "angle_skip_tests": True,
              },
            },
          ]
          EOF
          
          git clone --depth 1 https://chromium.googlesource.com/angle/angle.git
          cd angle
          git fetch --depth 1 origin ${{ env.ANGLE_COMMIT }}
          git checkout ${{ env.ANGLE_COMMIT }}
          
          python scripts/bootstrap.py
          gclient sync --no-history -D
          
      - name: Configure build
        run: |
          cd angle
          
          # Build with all macOS-supported backends
          ARGS="is_debug=false is_component_build=false"
          ARGS="$ARGS angle_enable_metal=true"
          ARGS="$ARGS angle_enable_gl=true"
          ARGS="$ARGS angle_enable_null=true"
          ARGS="$ARGS angle_build_tests=false"
          
          # Set architecture
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ARGS="$ARGS target_cpu=\"arm64\""
          else
            ARGS="$ARGS target_cpu=\"x64\""
          fi
          
          gn gen out/Release --args="$ARGS"
          
      - name: Build
        run: |
          cd angle
          ninja -C out/Release libEGL libGLESv2
          
      - name: Package
        run: |
          cd angle
          mkdir -p ../angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
          # Copy libraries
          cp -v out/Release/libEGL.dylib ../angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
          cp -v out/Release/libGLESv2.dylib ../angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}/ || true
          
          # Copy headers
          cp -r include ../angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}/
          
          cd ..
          zip -r angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}.zip angle-macos-${{ matrix.arch }}-${{ env.BUILD_DATE }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-macos-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-macos-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0

  release:
    runs-on: ubuntu-24.04
    needs: [info, build-windows, build-linux, build-macos]
    if: always() && needs.info.result == 'success' && needs.build-windows.result == 'success'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Create GitHub Release
        run: |
          cat > notes.txt << EOF
          [ANGLE Commit](https://github.com/google/angle/commit/${{ needs.info.outputs.ANGLE_COMMIT }})
          
          ## Platforms & Backends
          
          ### Windows (x64, arm64)
          - Direct3D 9
          - Direct3D 11
          - OpenGL
          - Vulkan
          - Null
          
          ### Linux (x64, arm64)
          - OpenGL
          - Vulkan
          - Null
          
          ### macOS (x64 Intel, arm64 Apple Silicon)
          - Metal
          - OpenGL
          - Null
          EOF
          
          gh release create ${{ needs.info.outputs.BUILD_DATE }} -R "${GITHUB_REPOSITORY}" -t '${{ needs.info.outputs.BUILD_DATE }}' -F notes.txt
      
      - name: Get Artifacts From Build Steps
        uses: actions/download-artifact@v4
        with:
          pattern: angle-*-${{ needs.info.outputs.BUILD_DATE }}
          merge-multiple: true
      
      - name: Upload Artifacts to GitHub Release
        run: |
          for file in angle-*-${{ needs.info.outputs.BUILD_DATE }}.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload '${{ needs.info.outputs.BUILD_DATE }}' "$file" -R "${GITHUB_REPOSITORY}"
            fi
          done
