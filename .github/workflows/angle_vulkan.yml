name: build-angle-vulkan
on:
  schedule:
    - cron: "0 0 * *0"
  push:
    branches:
      - main
jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      ANGLE_COMMIT: ${{ steps.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
    steps:
      - name: Get Latest Commit Id
        id: info
        run: |
          echo ANGLE_COMMIT=`git ls-remote https://chromium.googlesource.com/angle/angle HEAD | awk '{ print $1 }'` >> ${GITHUB_OUTPUT}
          echo BUILD_DATE=`date +'%Y-%m-%d'` >> ${GITHUB_OUTPUT}
  build:
    runs-on: windows-2022
    needs: info
    strategy:
      matrix:
        arch: [x64, arm64]
    env:
      ANGLE_COMMIT: ${{ needs.info.outputs.ANGLE_COMMIT }}
      BUILD_DATE: ${{ needs.info.outputs.BUILD_DATE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Ensure Vulkan SDK is available (Windows 2022 runners should have it)
      - name: Verify Vulkan SDK
        shell: cmd
        run: |
          echo Checking for Vulkan SDK...
          if exist "%VULKAN_SDK%" (
            echo Vulkan SDK found at %VULKAN_SDK%
          ) else (
            echo Warning: VULKAN_SDK environment variable not set
          )
      - name: Run Build Script
        id: build
        shell: cmd
        run: call build.cmd ${{ matrix.arch }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angle-vulkan-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}
          path: angle-${{ matrix.arch }}-${{ needs.info.outputs.BUILD_DATE }}.zip
          if-no-files-found: error
          compression-level: 0
  release:
    runs-on: ubuntu-24.04
    needs: [info, build]
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Create GitHub Release
        run: |
          echo '[angle commit](https://github.com/google/angle/commit/${{ needs.info.outputs.ANGLE_COMMIT }}) - **Built with Vulkan support**' >>notes.txt
          gh release create vulkan-${{ needs.info.outputs.BUILD_DATE }} -R "${GITHUB_REPOSITORY}" -t 'ANGLE Vulkan ${{ needs.info.outputs.BUILD_DATE }}' -F notes.txt
      - name: Get Artifacts From Build Steps
        uses: actions/download-artifact@v4
        with:
          pattern: angle-vulkan-*-${{ needs.info.outputs.BUILD_DATE }}
          merge-multiple: true
      - name: Upload Artifacts to GitHub Release
        run: gh release upload 'vulkan-${{ needs.info.outputs.BUILD_DATE }}' angle-*-${{ needs.info.outputs.BUILD_DATE }}.zip -R "${GITHUB_REPOSITORY}"
